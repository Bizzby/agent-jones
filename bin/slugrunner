#!/usr/bin/env bash


#Flynn is a trademark of Apollic Software, LLC.

# Copyright (c) 2013-2014 Apollic Software, LLC. All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:

#    * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#    * Neither the name of Apollic Software, LLC nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# set -eo pipefail

[[ $DEBUG_SLUGRUNNER ]] && set -x

## Load slug from Bind Mount, URL or STDIN

export HOME=$PWD/app
mkdir -p $HOME

if [[ $(ls -A $HOME) ]]; then
    true
elif [[ $SLUG_URL ]]; then
    if [[ -e /var/run/secrets/object/store/access-key-id ]]; then
        if [[ -e /var/run/secrets/object/store/access-secret-key ]]; then
            keyID=`cat /var/run/secrets/object/store/access-key-id`
            secretKey=`cat /var/run/secrets/object/store/access-secret-key`
            domain=`echo $SLUG_URL | awk -F/ '{print $3}'`
            echo $keyID $secretKey $domain
            mc config host add $domain $keyID $secretKey
            mc --quiet cp $SLUG_URL slug.tgz
            tar -xzf slug.tgz -C $HOME
            rm slug.tgz
            unset SLUG_URL
        fi
    else
        ## opendeis/flynn tarballs have no container directory
        ## heroku tarballs have `./app/` as the container dir
        curl -s "$SLUG_URL" | tar -xzC $HOME --strip 2
        unset SLUG_URL
    fi
else
    cat | tar -xzC $HOME
fi

cd $HOME

## Load profile.d and release config

shopt -s nullglob
mkdir -p .profile.d

# If a file is created in slugbuilder with the wrong UID, change it. But we
# don't mess with anything owned by UID 0.
# skip for now!
# find . -user 1000 -exec chown slug:slug {} \;

if [[ -s .release ]]; then
    ruby -e "require 'yaml';(YAML.load_file('.release')['config_vars'] || {}).each{|k,v| puts \"#{k}='#{v}'\"}" > .profile.d/config_vars
fi
for file in .profile.d/*; do
    source $file
done
hash -r


## Inject "start" command to run processes defined in Procfile
case "$1" in
    start)
        if [[ -f Procfile ]]; then
            command="$(ruby -e "require 'yaml';puts YAML.load_file('Procfile')['$2']")"
        else
            command="$(ruby -e "require 'yaml';puts (YAML.load_file('.release')['default_process_types'] || {})['$2']")"
        fi
        ;;

    *)
        command="$@"
        ;;
esac

## Use sdutil to register with service discovery

if [[ $SD_NAME && $PORT ]]; then
    if [[ $SD_HOST ]]; then
        runner="sdutil exec -h $SD_HOST -s $SD_NAME:$PORT bash -c"
        unset SD_HOST
    else
        runner="sdutil exec -s $SD_NAME:$PORT bash -c"
    fi
    unset SD_NAME
elif [[ $SD_ARGS ]]; then
    runner="sdutil $SD_ARGS bash -c"
    unset SD_ARGS
else
    runner="bash -c"
fi

## Run!

exec $runner "$command"
